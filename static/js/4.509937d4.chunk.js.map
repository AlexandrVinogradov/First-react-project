{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","user","active","to","name","MessageItem","message","maxLength50","maxLenghtCreator","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","placeholder","component","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messageElements","messages","m","newMessageText","dialogs_items","values","addMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","addMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,KAAO,sBAAsB,SAAW,0BAA0B,QAAU,2B,+FCYlMC,EATI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,wBAAIC,UAAWC,IAAEC,KAAO,IAAMD,IAAEE,QACnC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCFnBC,EAJK,SAACT,GACjB,OAAO,wBAAIG,UAAWC,IAAEM,SAAUV,EAAMU,U,iCCCtCC,EAAcC,YAAiB,IAatBC,cAAU,CAACC,KAAM,wBAAjBD,EAXQ,SAACb,GACpB,OAAO,0BAAMe,SAAUf,EAAMgB,cACzB,6BACI,kBAACC,EAAA,EAAD,CAAOC,SAAU,CAACC,IAAUR,GAAcS,YAAY,qBACtDZ,KAAK,iBAAiBa,UAAWC,OAErC,6BACI,oDCkBGC,EA1BC,SAACvB,GAEb,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMN,GAAI2B,EAAE3B,GAAI4B,IAAKD,EAAE3B,QACpF6B,EAAkBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAavB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE/B,QACjEsB,EAAMU,eAM3B,OACI,yBAAK/B,UAAWC,IAAEuB,SACd,wBAAIxB,UAAWC,IAAE+B,eACZT,GAEL,wBAAIvB,UAAWC,IAAE4B,UACZD,GAEL,6BACI,kBAAC,EAAD,CAAgBhB,SAbR,SAACqB,GACjBpC,EAAMqC,WAAWD,EAAOE,sB,wDCX1BC,EAA6B,SAACf,GAAD,MAAY,CAC3CgB,OAAQhB,EAAMiB,KAAKD,S,OCoBRE,sBACXC,aAhBoB,SAACnB,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACmB,GACxB,MAAO,CACHP,WAAY,SAACC,GACTM,EAASC,YAAwBP,UDXb,SAACQ,GAAe,IACtCC,EADqC,iLAGnC,OAAKC,KAAKhD,MAAMwC,OAET,kBAACM,EAAcE,KAAKhD,OAFI,kBAAC,IAAD,CAAUO,GAAG,eAHT,GACX0C,IAAMH,WAWtC,OAFqCH,YAAQJ,EAARI,CAAoCI,KCQ9DL,CAGbnB","file":"static/js/4.509937d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1yYxH\",\"dialogs_items\":\"Dialogs_dialogs_items__3jH3z\",\"active\":\"Dialogs_active__3A4zG\",\"user\":\"Dialogs_user__1I2vG\",\"messages\":\"Dialogs_messages__2wBNS\",\"message\":\"Dialogs_message__2rz4m\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return <li className={s.user + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </li>;\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst MessageItem = (props) => {\r\n    return <li className={s.message}>{props.message}</li>\r\n}\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { required, maxLenghtCreator } from '../../../utils/validators/validators';\r\nimport { reduxForm, Field } from 'redux-form';\r\n\r\nconst maxLength50 = maxLenghtCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field validate={[required, maxLength50]} placeholder=\"Enter your message\" \r\n            name=\"newMessageBody\" component={Textarea} />\r\n        </div>\r\n        <div>\r\n            <button>Add message</button>\r\n        </div>\r\n    </form>\r\n}\r\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport MessageItem from './MessageItem/MessageItem';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id} />);\r\n    let messageElements = state.messages.map(m => <MessageItem message={m.message} key={m.id} />);\r\n    let newMessageText = state.newMessageText;\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (        \r\n        <div className={s.dialogs}>\r\n            <ul className={s.dialogs_items}>\r\n                {dialogsElements}\r\n            </ul>\r\n            <ul className={s.messages}>\r\n                {messageElements}\r\n            </ul>\r\n            <div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport { addMessageActionCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from \"redux\";\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// compose берет Dialog, закидывает его в withAuthRedirect, далее результат закидывает в connect\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect // это hoc\r\n)(Dialogs);"],"sourceRoot":""}